% -*- latex -*-
\documentclass[14pt, notes=hide]{beamer}

\usepackage{lmodern}


\usepackage[autogenerated]{ucs}
\include{unicodedefs}

\newcommand{\bi}[1]{\color<2->{blue}{#1}}
\newcommand{\gi}[1]{\color<2->{green}{#1}}
\newcommand{\trc}[1]{#1^{\times}}
\newcommand{\She}{\text{She}}
\newcommand{\eats}{\text{eats}}
\newcommand{\an}{\text{a}}
\newcommand{\fish}{\text{fish}}
\newcommand{\with}{\text{with}}
\newcommand{\fork}{\text{fork}}
\newcommand{\tos}{\hspace{-0.3cm}\to\hspace{-0.3cm}}
\DeclareMathOperator{\overlap}{Overlap}
\DeclareMathOperator{\tc}{TC}
%include agda.fmt

%include Definitions.lagda

\title{An Agda proof of the correctness of Valiant's algorithm for CF parsing}
\author{Thomas B{\aa}{\aa}th Sj{\"o}blom}
\institute{Chalmers University of Technology}
\date{}

\definecolor{darkgreen}{rgb}{0,0.4,0}

\begin{document}
\begin{frame}               % 1
\titlepage
% introduction
% example

% chart parsing
% transitive closure
% specification of transitive closure
\end{frame}

\begin{frame}{Motivation}
  \begin{itemize}
    \pause
  \item Valiant's algorithm 
    \begin{itemize}
      \pause
    \item 1974: Prove that parsing can be done as quickly as matrix multiplication.
      \pause
    \item 2013: Provide a practical (?) algorithm for parsing in parallel.
      \pause
    \item Can be derived from matrix algebra.
    \end{itemize}
    \pause
  \item Formal proof
    \begin{itemize}
      \pause
    \item Bug free code is important!
      \pause
    \item Valiant's algorithm is complicated enough to need it.
    \end{itemize}
    \pause
  \item Agda
    \begin{itemize}
      \pause
    \item Familiar if you know Haskell.
      \pause
    \item Not much math in it (yet!).
    \end{itemize}
  \end{itemize}
\end{frame}

\begin{frame}{Parsing}{Introduction}  % 3
Analysing the structure of a string
\pause
%(from Wikipedia CYK algorithm)

\center ``She eats a fish with a fork''

\raggedright
 
\pause
Grammar:
\pause
\begin{align*}
  \Sigma &= \{\text{She}, \text{eats}, \text{a}, \text{fish}, \text{with}, \text{fork}\}\\ 
  \uncover<5->{N &= \{S, N, N_p, V, V_p, D, P, P_p\}}\\
  \uncover<6->{P &= 
  \left\{\begin{tabular}{l c l || l c l || l c l}%{l | l | l} 
    $S  $ & $\tos$ & $N_pV_p $  &  $P_p$ & $\tos$ & $P N_p$  &  $N_p$ & $\tos$ & She  \\
    $V_p$ & $\tos$ & $V_pP_p $  &  $N_p$ & $\tos$ & $D N  $  &  $N  $ & $\tos$ & fish \\
    $V_p$ & $\tos$ & $V N_p  $  &  $V$   & $\tos$ & eats     &  $N  $ & $\tos$ & fork \\
    $V_p$ & $\tos$ & eats       &  $P$   & $\tos$ & with     &  $D  $ & $\tos$ & a
  \end{tabular}\right\}}\\
  \uncover<7->{S &= S}
\end{align*}
\end{frame}


\begin{frame}{Parsing}
``She \textcolor<4>{red}{eats \textcolor<9-10>{red}{\textcolor<11-13>{blue}{a} \textcolor<12-13>{blue}{\textcolor<11>{green}{fish}}}} \textcolor<9-10>{red}{\textcolor<13>{blue}{\textcolor<11-12>{green}{with}} \textcolor<11-13>{green}{a}} fork''\\
  \pause
  \begin{columns}
    \column{0.5\textwidth}
    \begin{itemize}
        \uncover<6->{\item Superdiagonal:\begin{itemize}
        \item Fill with $N_p \to \She$, $V \to \eats$, $V_p \to \eats$, $D \to \an$, etc. Defines $C$.
          \end{itemize}

        \uncover<9->{\item The rest:
          \begin{itemize}
          \uncover<10->{
        \item $x \cdot y = \{A \mid B \in x, C \in y,$ $A \to BC \in P \}$}
          \uncover<14->{\item $X_{ij} = \sum_k X_{ik} \cdot X_{kj}$}
          \end{itemize}
        }
        \uncover<15->{\item $X = X X + C$ }
}
   
    \end{itemize}
    \column{0.5\textwidth}
    \begin{equation*}
      \begin{pmatrix}
        0 & \color<6-7>{red}{?} & ? & ? & ? & ? & ? & ? \\
          & 0 & \color<6-7>{red}{?} & ? & \color<3-4>{red}{?} & ? & ? & ? \\
          &   & 0 & \color<11>{blue}{\color<6-7>{red}{?}} & \color<12>{blue}{?} & \color<13>{blue}{?} & \color<9->{red}{?} & ? \\
          &   &   & 0 & \color<6-7>{red}{?} & ? & \color<11>{green}{?} & ? \\
          &   &   &   & 0 & \color<6-7>{red}{?} & \color<12>{green}{?} & ? \\
          &   &   &   &   & 0 & \color<6-7>{red}{\color<13>{green}{?}} & ? \\
          &   &   &   &   &   & 0 & \color<6-7>{red}{?} \\
          &   &   &   &   &   &   & 0
      \end{pmatrix}
    \end{equation*}
    Save substring parses in $X$.
  \end{columns}
\end{frame}

\begin{frame}{Valiant's Algorithm} % 6
  \begin{equation*}
    X = XX + C
  \end{equation*}
$C$ upper triangular. Find $X$.
  \begin{itemize}
    \pause
  \item $C$ a $1 \times 1$ matrix $\implies C = (0)$. $X = (0)$.
    \pause
    \item $C$ a $2^n \times 2^n$ matrix:
      \begin{enumerate}
        \pause
      \item Split: $C = 
        \begin{pmatrix}
          C_U & C_R \\
          & C_L
        \end{pmatrix}$, $X = \begin{pmatrix}
          X_U & X_R \\
          & X_L
        \end{pmatrix}$
        \pause
      \item $
          \begin{pmatrix}
            X_U & X_R \\
            & X_L
          \end{pmatrix} = \begin{pmatrix}
            X_UX_U + C_U & X_UX_R  + X_RX_L + C_R\\
            & X_LX_L + C_L
          \end{pmatrix}$
          \pause
        \item Recursively compute $X_U$, $X_L$.
          \pause
        \item Find $X_R$: $X_R = X_UX_R +X_RX_L + C_R$.
      \end{enumerate}
  \end{itemize}
\end{frame} %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

\begin{frame}{Valiant's Algorithm} % 6
  \begin{equation*}
    X_R = X_UX_R +X_RX_L + C_R
  \end{equation*}
  \begin{itemize}
    \pause
  \item $C_R$ a $1 \times 1$ matrix $\implies X_U = X_L = (0)$. $X_R = C_R$.
    \pause
  \item $C_R$ a $2^n \times 2^n$ matrix:
    \begin{itemize}
      \pause
    \item Split $C_R = \begin{pmatrix}C_1 &C_2 \\ C_3 &C_4 \end{pmatrix}$, $X_R = \begin{pmatrix}X_1 & X_2 \\ X_3 & X_4 \end{pmatrix}$, $X_U = 
      \begin{pmatrix} X_{U_U} & X_{U_R} \\ & X_{U_L} \end{pmatrix}$ and $X_L = \begin{pmatrix} X_{L_U} & X_{L_R} \\ & X_{L_L} \end{pmatrix}$
      \pause
    \item Multiplying together gives 
      \begin{align*}
        X_1 &= X_{U_U}X_1 + X_1X_{L_U} + X_{U_R}X_3 + C_1\\
        X_2 &= X_{U_U}X_2 + X_2X_{L_L} + X_{U_R}X_4 + X_1X_{L_R} + C_2\\
        X_3 &= X_{U_L}X_3 + X_3X_{L_U} + C_3\\
        X_4 &= X_{U_L}X_4 + X_4X_{L_L} + X_3X_{L_R} + C_4\\
      \end{align*}
    \end{itemize}
  \end{itemize}
\end{frame} %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%\begin{frame}{Example}
%\center ``She eats a fish with a fork''\small
%      \begin{equation*}
%      \begin{pmatrix}
%\bi{0} & \bi{\{N_p\}} & \bi{\alt<-3>{?}{\{S\}}} & \bi{?} & ? & ? & ? & ? \\
%  & \bi{0}    & \bi{\{V, V_p\}} & \bi{\alt<-3>{?}{0}} & ? & ? & ?  & ? \\
%         &      & \bi{0}    & \bi{\{D\}} & ? & ? & ? & ? \\
%         &      &      & \bi{0}    & \{N\} & ? & ? & ?  \\
%          &      &      &      & \gi{0}    & \gi{\{P\}} & \gi{?} & \gi{?}  \\
%          &      &      &      &      & \gi{0}    & \gi{\{D\}} & \gi{?}  \\
%          &      &      &      &      &      & \gi{0}    & \gi{\{N\}}  \\
%          &      &      &      &      &      &      & \gi{0} 
%      \end{pmatrix}
%    \end{equation*}
%\color<10>{red}{a}
%\end{frame}


\begin{frame}{Agda} % 8
  Need:
  \begin{itemize}
    \pause
  \item Matrix datatype
    \pause
  \item Upper triangular matrix datatype
    \pause
  \item Addition and multiplication
    \pause
  \item Equality
  \end{itemize}
\end{frame}

\begin{frame}{Agda} % 9
\begin{code}
data Mat : ℕ → Set where
  sing  : R → Mat 0
  quad  : ∀ {n}  → Mat n → Mat n 
                 → Mat n → Mat n 
                 → Mat (suc n)
\end{code}
\pause
\begin{code}
data Tri : ℕ → Set where
  zer  : Tri 0
  tri  : ∀ {n} → Tri n  → Mat n
                        → Tri n 
                        → Tri (suc n)

\end{code}
\end{frame} %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%


\begin{frame}{Agda} % 11
%format R+ = "\mathbin{+_{\!\!_R}}"
%format R* = "\mathbin{*_{\!_R}}"
% %format * = "\mathbin{*}"
\vspace{-0.5cm}
\begin{code}
_+_ : ∀ {n} → Mat n → Mat n → Mat n
sing x        + sing x'           = sing (x R+ x')
quad A B C D  + quad A' B' C' D'  = 
  quad  (A + A')  (B + B') 
        (C + C')  (D + D')
\end{code}
\pause
\begin{code}
_*_ : ∀ {n} → Mat n → Mat n → Mat n
sing x        * sing x'           = sing (x R* x')
quad A B C D  * quad A' B' C' D'  = 
  quad  (A * A' + B * C')  (A * B' + B * D') 
        (C * A' + D * C')  (C * B' + D * D')
\end{code}
\end{frame} %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%


\begin{frame}{Agda} % 11 exact same thing!
%TODO remove or do for all:
%format ˣ = "_1^{" + "}" 
\begin{code}
overlap : ∀ {n} → Tri n → Mat n → Tri n → Mat n
overlap zer (sing x) zer                      = sing x
overlap (tri U₁' R₁' L₁')  (quad A B C D) 
                           (tri U₂' R₂' L₂')  = quad  A'  B' 
                                                      C'  D'
  where  
    C'  = overlap L₁' C U₂'
    A'  = overlap U₁' (A + R₁' * C') U₂'
    D'  = overlap L₁' (D + C' * R₂') L₂'
    B'  = overlap U₁' (B + R₁' * D' + A' * R₂') L₂'
\end{code}
\end{frame} %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

\begin{frame}{Agda} % 11
\begin{code}
valiant : ∀ {n} → Tri n → Tri n
valiant zer          = zer
valiant (tri U R L)  = tri U⁺ (overlap U⁺ R L⁺) L⁺
  where  U⁺  = valiant U
         L⁺  = valiant L
\end{code}
\end{frame} %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%


\begin{frame}{Agda} % 13
\begin{itemize}
\item Equality: 
  \begin{code}
    _≈_ : ∀ {n} → Tri n → Tri n → Set
    zer ≈ zer = tt
    (tri U R L) ≈ (tri U' R' L') = U ≈ U'  ,  R ≈ R' 
                                           ,  L ≈ L'
  \end{code}
  \pause
\item To prove the correctness, find an element of type
\begin{code}
∀ {n} {C : Tri n} → 
  (valiant C) ≈ (valiant C) * (valiant C) + C
\end{code}
\end{itemize}
\end{frame} %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

\begin{frame}{Agda} % 14
Sketch of proof:
\begin{itemize}
  \item We pattern match on the |Tri|.
    \begin{itemize}
    \item |zer|, should have type
      \begin{code}
        zer ≈ zer * zer + zer
      \end{code}
    \item |tri|, we get that the overlap function should satisfy
      \begin{code}
        R' ≈ U * R' + R' * L +   R,
      \end{code}
      but this was the specification we used to derive it.
    \end{itemize}
\end{itemize}
\end{frame} %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

\begin{frame}{Thank you!}
  Thank you!
\end{frame}
\end{document}
